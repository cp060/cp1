pipeline {
    agent any
    
    stages {
        stage('Get Code'){
            steps {
                // get code from repo
                git 'https://github.com/cp060/cp1.git'
            }
        }
        
        stage('plugin1(flake): Static'){
            steps {
                bat 'flake8 --format=pylint --exit-zero app >flake8.out'
                recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [[threshold:
8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
            }
        }
        
        stage('plugin2(junit): Unit') {
            steps {
                bat '''
                    SET PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-unit.xml test\\unit
                '''
                junit 'result*.xml'
            }
        }
                
        stage('plugin3(coverage): Cobertura'){
            steps {
                bat '''
                    coverage run --branch --source=app --omit=app\\__init__.py,app\\api.py -m pytest test\\unit
                    coverage xml
                '''
                cobertura autoUpdateHealth: false, autoUpdateStability: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '100, 80, 90', failNoReports: false, failUnhealthy: false, failUnstable: false, lineCoverageTargets: '100, 85, 95', maxNumberOfBuilds: 0, onlyStable: false, sourceEncoding: 'ASCII', zoomCoverageChart: false
            }
        }
        
        stage('plugin4(bandit): Security'){
            steps{
                bat 'bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}, {severity}] {msg}â€œ'
                recordIssues tools: [pyLint(name: 'bandit', pattern: 'bandit.out')], qualityGates: [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
            }
        }
        
         stage('plugin5(jmeter): Performance'){
            steps{
                echo WORKSPACE
                bat '''
                    SET FLASK_APP=app\\api.py
                    start flask run
                    powershell %WORKSPACE%\\valp5000.ps1  
                    C:\\Users\\toma\\Documents\\unir\\apache-jmeter-5.6.3\\bin\\jmeter -n -t test\\jmeter\\reto5.jmx -f -l reto5_unir.jtl
                '''
                perfReport filterRegex: '', sourceDataFiles: 'reto5_unir.jtl'
                bat 'powershell %WORKSPACE%\\killp5000.ps1'
            }
        }
        
        stage('cleanWs') {
            steps {
                cleanWs()
            }
        }
    }
}
